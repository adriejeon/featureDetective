{"ast":null,"code":"import axios from \"axios\";\n\n// API 기본 설정\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\n\n// Axios 인스턴스 생성\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// 응답 인터셉터 (에러 처리)\napiClient.interceptors.response.use(response => {\n  return response;\n}, error => {\n  console.error(\"API 오류:\", error);\n  return Promise.reject(error);\n});\n\n// 타입 정의\n\n// 프로젝트 API\nexport const projectAPI = {\n  getProjects: () => apiClient.get(\"/projects\"),\n  createProject: (name, description) => apiClient.post(\"/projects\", {\n    name,\n    description\n  }),\n  getProject: id => apiClient.get(`/projects/${id}`),\n  updateProject: (id, data) => apiClient.put(`/projects/${id}`, data),\n  deleteProject: id => apiClient.delete(`/projects/${id}`)\n};\n\n// 키워드 API\nexport const keywordAPI = {\n  getKeywords: projectId => apiClient.get(`/keywords/projects/${projectId}/keywords`),\n  createKeyword: (projectId, keyword, category) => apiClient.post(`/keywords/projects/${projectId}/keywords`, {\n    keyword,\n    category\n  }),\n  updateKeyword: (keywordId, data) => apiClient.put(`/keywords/${keywordId}`, data),\n  deleteKeyword: keywordId => apiClient.delete(`/keywords/${keywordId}`),\n  uploadKeywords: (projectId, file) => {\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    return apiClient.post(`/keywords/projects/${projectId}/keywords/upload`, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n  },\n  downloadKeywords: projectId => apiClient.get(`/keywords/projects/${projectId}/keywords/download`, {\n    responseType: \"blob\"\n  })\n};\n\n// 크롤링 API\nexport const crawlingAPI = {\n  startCrawling: (projectId, urls) => apiClient.post(`/crawling/projects/${projectId}/crawl`, {\n    urls\n  }),\n  getCrawlingStatus: projectId => apiClient.get(`/crawling/projects/${projectId}/crawl/status`),\n  getCrawlingResults: (projectId, page = 1, perPage = 20) => apiClient.get(`/crawling/projects/${projectId}/results`, {\n    params: {\n      page,\n      per_page: perPage\n    }\n  }),\n  getCrawlingResult: resultId => apiClient.get(`/crawling/results/${resultId}`),\n  deleteCrawlingResult: resultId => apiClient.delete(`/crawling/results/${resultId}`)\n};\n\n// 리포트 API\nexport const reportAPI = {\n  generatePDFReport: projectId => apiClient.get(`/reports/projects/${projectId}/report/pdf`, {\n    responseType: \"blob\"\n  }),\n  generateCSVReport: projectId => apiClient.get(`/reports/projects/${projectId}/report/csv`, {\n    responseType: \"blob\"\n  }),\n  getReportSummary: projectId => apiClient.get(`/reports/projects/${projectId}/report/summary`),\n  getDetailedAnalysis: (projectId, page = 1, perPage = 20) => apiClient.get(`/reports/projects/${projectId}/report/analysis`, {\n    params: {\n      page,\n      per_page: perPage\n    }\n  })\n};\n\n// 헬스체크 API\nexport const healthAPI = {\n  checkHealth: () => apiClient.get(\"/health\")\n};\nexport default apiClient;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","interceptors","response","use","error","console","Promise","reject","projectAPI","getProjects","get","createProject","name","description","post","getProject","id","updateProject","data","put","deleteProject","delete","keywordAPI","getKeywords","projectId","createKeyword","keyword","category","updateKeyword","keywordId","deleteKeyword","uploadKeywords","file","formData","FormData","append","downloadKeywords","responseType","crawlingAPI","startCrawling","urls","getCrawlingStatus","getCrawlingResults","page","perPage","params","per_page","getCrawlingResult","resultId","deleteCrawlingResult","reportAPI","generatePDFReport","generateCSVReport","getReportSummary","getDetailedAnalysis","healthAPI","checkHealth"],"sources":["/Users/adriejeon/Desktop/featureDetective/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from \"axios\";\n\n// API 기본 설정\nconst API_BASE_URL =\n  process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\n\n// Axios 인스턴스 생성\nconst apiClient: AxiosInstance = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// 응답 인터셉터 (에러 처리)\napiClient.interceptors.response.use(\n  (response: AxiosResponse) => {\n    return response;\n  },\n  (error) => {\n    console.error(\"API 오류:\", error);\n    return Promise.reject(error);\n  }\n);\n\n// 타입 정의\nexport interface Project {\n  id: number;\n  name: string;\n  description: string;\n  user_id: number;\n  created_at: string;\n  updated_at: string;\n  keyword_count: number;\n  crawling_count: number;\n}\n\nexport interface Keyword {\n  id: number;\n  project_id: number;\n  keyword: string;\n  category: string;\n  created_at: string;\n}\n\nexport interface CrawlingResult {\n  id: number;\n  project_id: number;\n  url: string;\n  content: string;\n  status: string;\n  error_message: string;\n  crawled_at: string;\n}\n\nexport interface FeatureAnalysis {\n  id: number;\n  project_id: number;\n  keyword_id: number;\n  url: string;\n  support_status: \"O\" | \"X\" | \"△\";\n  confidence_score: number;\n  matched_text: string;\n  analyzed_at: string;\n}\n\n// 프로젝트 API\nexport const projectAPI = {\n  getProjects: () => apiClient.get(\"/projects\"),\n\n  createProject: (name: string, description: string) =>\n    apiClient.post(\"/projects\", { name, description }),\n\n  getProject: (id: number) => apiClient.get(`/projects/${id}`),\n\n  updateProject: (id: number, data: { name?: string; description?: string }) =>\n    apiClient.put(`/projects/${id}`, data),\n\n  deleteProject: (id: number) => apiClient.delete(`/projects/${id}`),\n};\n\n// 키워드 API\nexport const keywordAPI = {\n  getKeywords: (projectId: number) =>\n    apiClient.get(`/keywords/projects/${projectId}/keywords`),\n\n  createKeyword: (projectId: number, keyword: string, category: string) =>\n    apiClient.post(`/keywords/projects/${projectId}/keywords`, {\n      keyword,\n      category,\n    }),\n\n  updateKeyword: (\n    keywordId: number,\n    data: { keyword?: string; category?: string }\n  ) => apiClient.put(`/keywords/${keywordId}`, data),\n\n  deleteKeyword: (keywordId: number) =>\n    apiClient.delete(`/keywords/${keywordId}`),\n\n  uploadKeywords: (projectId: number, file: File) => {\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    return apiClient.post(\n      `/keywords/projects/${projectId}/keywords/upload`,\n      formData,\n      {\n        headers: { \"Content-Type\": \"multipart/form-data\" },\n      }\n    );\n  },\n\n  downloadKeywords: (projectId: number) =>\n    apiClient.get(`/keywords/projects/${projectId}/keywords/download`, {\n      responseType: \"blob\",\n    }),\n};\n\n// 크롤링 API\nexport const crawlingAPI = {\n  startCrawling: (projectId: number, urls: string[]) =>\n    apiClient.post(`/crawling/projects/${projectId}/crawl`, { urls }),\n\n  getCrawlingStatus: (projectId: number) =>\n    apiClient.get(`/crawling/projects/${projectId}/crawl/status`),\n\n  getCrawlingResults: (projectId: number, page = 1, perPage = 20) =>\n    apiClient.get(`/crawling/projects/${projectId}/results`, {\n      params: { page, per_page: perPage },\n    }),\n\n  getCrawlingResult: (resultId: number) =>\n    apiClient.get(`/crawling/results/${resultId}`),\n\n  deleteCrawlingResult: (resultId: number) =>\n    apiClient.delete(`/crawling/results/${resultId}`),\n};\n\n// 리포트 API\nexport const reportAPI = {\n  generatePDFReport: (projectId: number) =>\n    apiClient.get(`/reports/projects/${projectId}/report/pdf`, {\n      responseType: \"blob\",\n    }),\n\n  generateCSVReport: (projectId: number) =>\n    apiClient.get(`/reports/projects/${projectId}/report/csv`, {\n      responseType: \"blob\",\n    }),\n\n  getReportSummary: (projectId: number) =>\n    apiClient.get(`/reports/projects/${projectId}/report/summary`),\n\n  getDetailedAnalysis: (projectId: number, page = 1, perPage = 20) =>\n    apiClient.get(`/reports/projects/${projectId}/report/analysis`, {\n      params: { page, per_page: perPage },\n    }),\n};\n\n// 헬스체크 API\nexport const healthAPI = {\n  checkHealth: () => apiClient.get(\"/health\"),\n};\n\nexport default apiClient;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}